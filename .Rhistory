zeroJtemp <- zeroJ[zero_sample,eq]
data_mismatch[,1] <- zeroJtemp
} else {
# select sample from oneJtemp randomly (having the same dimension with mismatch class)
one_sample <- sample(1:roneJ, rzeroJ, replace=FALSE)     # generate random index
oneJtemp <- oneJ[one_sample,eq]
data_match[,1] <- oneJtemp
}
rocr <- rbind(data_match, data_mismatch)
colnames(rocr) <- c("simCoefVal", "labels")
pred <- prediction(rocr[,1], rocr[,2])
perf <- performance(pred,"tpr","fpr")
# AUC analysis
auc <- performance(pred,"auc")
auc_label <- unlist (auc@y.name)
auc_values <- round(as.numeric(unlist(auc@y.values)), digits=4)
if(zsample > 1){
eq_auc[eq,(zsample+3)] <- auc_values
} else {
eq_auc[eq,1] <- label[eq]
eq_auc[eq,2] <- id2name(label[eq])
eq_auc[eq,3] <- type
eq_auc[eq,4] <- auc_values
}
}
# end zsample
}
# end ROC analysis
# Mean of AUC
tmp_eqAuc <- as.matrix((eq_auc[,4:ncol(eq_auc)]))
class(tmp_eqAuc) <- "numeric"
meanAUC <- as.matrix(rowMeans(tmp_eqAuc))
eq_auc <- cbind(eq_auc, meanAUC)
iter <- sprintf("iter%02d",1:numSample)
colnames(eq_auc) <- c("Eq.IDs","Equations", "Sim/Dissim",iter,"meanAUC")
# order by meanAUC descending
eq_auc <- eq_auc[order(-meanAUC),]
View(eq_auc)
# View top-n recommended equations
cat("Top-10 recommended equations:\n")
eq_auc[1:10,c(1,2,23)]
# save output
fout <- paste("bmeasures_", inFile)
fout <- gsub(" ", "", fout)
write.csv(eq_auc, file = fout, row.names = FALSE)
return (eq_auc)
}
out <- bmeasures_find(inFile = "immune_cancer.csv")
View(eq_auc)
View(out)
bmeasures_find <- function (inFile, setSeed=0, numSample=20, numRange=100){
# read input file
dataIn <- read.csv(inFile, header = TRUE)
dataIn <- as.matrix(dataIn)
ndataIn <- nrow(dataIn)
cdataIn <- ncol(dataIn)
maxPair <- (ndataIn * (ndataIn - 1))/2
nFeat <- cdataIn-1
# selected equation
redEq <- c("eq_01", "eq_02", "eq_04", "eq_06", "eq_07", "eq_08", "eq_09", "eq_10", "eq_12", "eq_15", "eq_16", "eq_24", "eq_25", "eq_26", "eq_27", "eq_29", "eq_31", "eq_34", "eq_35", "eq_36", "eq_39", "eq_40", "eq_44", "eq_45", "eq_46", "eq_47", "eq_48", "eq_49", "eq_50", "eq_51", "eq_52", "eq_54", "eq_55", "eq_57", "eq_59", "eq_61", "eq_62", "eq_63", "eq_66", "eq_68", "eq_71", "eq_74", "eq_77", "eq_78", "eq_79")
# temporary out matrix
mat <- matrix(0,maxPair,length(redEq)+3)   # cols: Sim/Dissim Eq. 1-45, class1, class2, match/mismatch
tmpID <- matrix(0,maxPair,2)
# calculate similarity/dissimilarity measures using selected equations
# for each equation; for all sample pairs
cat("\nMeasuring the similarity/dissimilarity measures between samples: \n")
for(eq in 1:length(redEq)){
cat("   Eq. IDs:", redEq[eq], "(", eq, "/", length(redEq), ")\n")
id <- 1
for(i in 1:(ndataIn-1)){
for (j in (i+1):ndataIn){
x <- t(as.matrix(dataIn[i,1:nFeat]))
y <- t(as.matrix(dataIn[j,1:nFeat]))
# match/mismatch class
if(eq == 1){
classx <- dataIn[i,cdataIn]
classy <- dataIn[j,cdataIn]
mat[id,length(redEq)+1] <- classx
mat[id,length(redEq)+2] <- classy
if(classx == classy)
mat[id,length(redEq)+3] <- 1
}
tmpResult <- bmeasures(x,y,method = redEq[eq])   # cols out: a b c d coef
# cat("sample:", i,"-", j, "\n")
mat[id,eq] <- tmpResult[1,5]
# tmpID[id,1] <- i
# tmpID[id,2] <- j
id <- id+1
}
}
}
colnames(mat) <- c(redEq, "classx", "classy", "matchxy")
# remove column "classx" and "classy"
mat <- mat[,c(-46,-47)]         # character
# eliminate equations with NA/Infinite values
mat[is.infinite(mat)] <- NA
mat <- mat[,!is.na(colSums(mat))]       #remove col with infinite and NA values
label <- colnames(mat)
z <- length(label)
dissim <- c("eq_15", "eq_16", "eq_17", "eq_18", "eq_19", "eq_20", "eq_21", "eq_22", "eq_23", "eq_24", "eq_25", "eq_26", "eq_27", "eq_28", "eq_29", "eq_30", "eq_62")
# classify into match and mismatch classes
oneJ <- subset(mat, mat[,z] == 1)
zeroJ <- subset(mat, mat[,z] == 0)
# ROC Analysis -----------------------------------------------------------------------------------
cat("\nThe ROC Analysis:\n")
library(ROCR)
roneJ <- nrow(oneJ)
rzeroJ <- nrow(zeroJ)
# num. of samples in the match class are smaller than num. of samples in the mismatch class
if(roneJ <= rzeroJ){
data_match <- matrix(1,roneJ,2)       # Sim coeff values, label (1/0)
data_mismatch <- matrix(0,roneJ,2)
} else {
data_match <- matrix(1,rzeroJ,2)
data_mismatch <- matrix(0,rzeroJ,2)
}
eq_auc <- matrix(0,(z-1),(numSample+3))              # eqIDs, eqName, type (S/D), auc of 20 samples
for (eq in 1:(z-1)){
cat("   Processing:", label[eq], "(", eq, "/", (z-1), ")\n")
maxSim1J <- max(oneJ[,eq])
minSim1J <- min(oneJ[,eq])
maxSim0J <- max(zeroJ[,eq])
minSim0J <- min(zeroJ[,eq])
maxSimJ <- max(maxSim1J, maxSim0J)
minSimJ <- min(minSim1J, minSim0J)
# normalize using (X-min)/(max-min)
oneJ[,eq] <- as.numeric(as.matrix((oneJ[,eq]-minSimJ)/(maxSimJ-minSimJ)))
zeroJ[,eq] <- as.numeric(as.matrix((zeroJ[,eq]-minSimJ)/(maxSimJ-minSimJ)))
# sim/dissim measures
# S = 1 - D^2
mysim <- label[eq] %in% dissim
if (mysim == "TRUE"){
type <- "D"
# S = 1 - D^2
oneJ[,eq] <- 1 - (oneJ[,eq]^2)
zeroJ[,eq] <- 1- (zeroJ[,eq]^2)
} else {
type <- "S"
}
# ROCR package (AUC) ------------------------
# Update Sept 5, 2014 : same size (balanced match and mismatch class) and iteration 20x
if(roneJ <= rzeroJ){
data_match[,1] <- oneJ[,eq]
} else {
data_mismatch[,1] <- zeroJ[,eq]
}
for (zsample in 1:numSample)
{
# cat("   Sample:", zsample, "\n")
if(setSeed==1){
set.seed(zsample*10)
}
if(roneJ <= rzeroJ){
# select sample from zeroJtemp randomly (having the same dimension with match class)
zero_sample <- sample(1:rzeroJ, roneJ, replace=FALSE)     # generate random index
zeroJtemp <- zeroJ[zero_sample,eq]
data_mismatch[,1] <- zeroJtemp
} else {
# select sample from oneJtemp randomly (having the same dimension with mismatch class)
one_sample <- sample(1:roneJ, rzeroJ, replace=FALSE)     # generate random index
oneJtemp <- oneJ[one_sample,eq]
data_match[,1] <- oneJtemp
}
rocr <- rbind(data_match, data_mismatch)
colnames(rocr) <- c("simCoefVal", "labels")
pred <- prediction(rocr[,1], rocr[,2])
perf <- performance(pred,"tpr","fpr")
# AUC analysis
auc <- performance(pred,"auc")
auc_label <- unlist (auc@y.name)
auc_values <- round(as.numeric(unlist(auc@y.values)), digits=4)
if(zsample > 1){
eq_auc[eq,(zsample+3)] <- auc_values
} else {
eq_auc[eq,1] <- label[eq]
eq_auc[eq,2] <- id2name(label[eq])
eq_auc[eq,3] <- type
eq_auc[eq,4] <- auc_values
}
}
# end zsample
}
# end ROC analysis
# Mean of AUC
tmp_eqAuc <- as.matrix((eq_auc[,4:ncol(eq_auc)]))
class(tmp_eqAuc) <- "numeric"
meanAUC <- as.matrix(rowMeans(tmp_eqAuc))
eq_auc <- cbind(eq_auc, meanAUC)
iter <- sprintf("iter%02d",1:numSample)
colnames(eq_auc) <- c("Eq.IDs","Equations", "Sim/Dissim",iter,"meanAUC")
# order by meanAUC descending
eq_auc <- eq_auc[order(-meanAUC),]
#View(eq_auc)
# View top-n recommended equations
cat("\nTop-10 recommended equations:\n")
cat(eq_auc[1:10,c(1,2,23)])
# save output
fout <- paste("bmeasures_", inFile)
fout <- gsub(" ", "", fout)
write.csv(eq_auc, file = fout, row.names = FALSE)
return (eq_auc)
}
out <- bmeasures_find(inFile = "immune_cancer.csv")
print(head(out[1:5,1:3]))
bmeasures_find <- function (inFile, setSeed=0, numSample=20, numRange=100){
# read input file
dataIn <- read.csv(inFile, header = TRUE)
dataIn <- as.matrix(dataIn)
ndataIn <- nrow(dataIn)
cdataIn <- ncol(dataIn)
maxPair <- (ndataIn * (ndataIn - 1))/2
nFeat <- cdataIn-1
# selected equation
redEq <- c("eq_01", "eq_02", "eq_04", "eq_06", "eq_07", "eq_08", "eq_09", "eq_10", "eq_12", "eq_15", "eq_16", "eq_24", "eq_25", "eq_26", "eq_27", "eq_29", "eq_31", "eq_34", "eq_35", "eq_36", "eq_39", "eq_40", "eq_44", "eq_45", "eq_46", "eq_47", "eq_48", "eq_49", "eq_50", "eq_51", "eq_52", "eq_54", "eq_55", "eq_57", "eq_59", "eq_61", "eq_62", "eq_63", "eq_66", "eq_68", "eq_71", "eq_74", "eq_77", "eq_78", "eq_79")
# temporary out matrix
mat <- matrix(0,maxPair,length(redEq)+3)   # cols: Sim/Dissim Eq. 1-45, class1, class2, match/mismatch
tmpID <- matrix(0,maxPair,2)
# calculate similarity/dissimilarity measures using selected equations
# for each equation; for all sample pairs
cat("\nMeasuring the similarity/dissimilarity measures between samples: \n")
for(eq in 1:length(redEq)){
cat("   Eq. IDs:", redEq[eq], "(", eq, "/", length(redEq), ")\n")
id <- 1
for(i in 1:(ndataIn-1)){
for (j in (i+1):ndataIn){
x <- t(as.matrix(dataIn[i,1:nFeat]))
y <- t(as.matrix(dataIn[j,1:nFeat]))
# match/mismatch class
if(eq == 1){
classx <- dataIn[i,cdataIn]
classy <- dataIn[j,cdataIn]
mat[id,length(redEq)+1] <- classx
mat[id,length(redEq)+2] <- classy
if(classx == classy)
mat[id,length(redEq)+3] <- 1
}
tmpResult <- bmeasures(x,y,method = redEq[eq])   # cols out: a b c d coef
# cat("sample:", i,"-", j, "\n")
mat[id,eq] <- tmpResult[1,5]
# tmpID[id,1] <- i
# tmpID[id,2] <- j
id <- id+1
}
}
}
colnames(mat) <- c(redEq, "classx", "classy", "matchxy")
# remove column "classx" and "classy"
mat <- mat[,c(-46,-47)]         # character
# eliminate equations with NA/Infinite values
mat[is.infinite(mat)] <- NA
mat <- mat[,!is.na(colSums(mat))]       #remove col with infinite and NA values
label <- colnames(mat)
z <- length(label)
dissim <- c("eq_15", "eq_16", "eq_17", "eq_18", "eq_19", "eq_20", "eq_21", "eq_22", "eq_23", "eq_24", "eq_25", "eq_26", "eq_27", "eq_28", "eq_29", "eq_30", "eq_62")
# classify into match and mismatch classes
oneJ <- subset(mat, mat[,z] == 1)
zeroJ <- subset(mat, mat[,z] == 0)
# ROC Analysis -----------------------------------------------------------------------------------
cat("\nThe ROC Analysis:\n")
library(ROCR)
roneJ <- nrow(oneJ)
rzeroJ <- nrow(zeroJ)
# num. of samples in the match class are smaller than num. of samples in the mismatch class
if(roneJ <= rzeroJ){
data_match <- matrix(1,roneJ,2)       # Sim coeff values, label (1/0)
data_mismatch <- matrix(0,roneJ,2)
} else {
data_match <- matrix(1,rzeroJ,2)
data_mismatch <- matrix(0,rzeroJ,2)
}
eq_auc <- matrix(0,(z-1),(numSample+3))              # eqIDs, eqName, type (S/D), auc of 20 samples
for (eq in 1:(z-1)){
cat("   Processing:", label[eq], "(", eq, "/", (z-1), ")\n")
maxSim1J <- max(oneJ[,eq])
minSim1J <- min(oneJ[,eq])
maxSim0J <- max(zeroJ[,eq])
minSim0J <- min(zeroJ[,eq])
maxSimJ <- max(maxSim1J, maxSim0J)
minSimJ <- min(minSim1J, minSim0J)
# normalize using (X-min)/(max-min)
oneJ[,eq] <- as.numeric(as.matrix((oneJ[,eq]-minSimJ)/(maxSimJ-minSimJ)))
zeroJ[,eq] <- as.numeric(as.matrix((zeroJ[,eq]-minSimJ)/(maxSimJ-minSimJ)))
# sim/dissim measures
# S = 1 - D^2
mysim <- label[eq] %in% dissim
if (mysim == "TRUE"){
type <- "D"
# S = 1 - D^2
oneJ[,eq] <- 1 - (oneJ[,eq]^2)
zeroJ[,eq] <- 1- (zeroJ[,eq]^2)
} else {
type <- "S"
}
# ROCR package (AUC) ------------------------
# Update Sept 5, 2014 : same size (balanced match and mismatch class) and iteration 20x
if(roneJ <= rzeroJ){
data_match[,1] <- oneJ[,eq]
} else {
data_mismatch[,1] <- zeroJ[,eq]
}
for (zsample in 1:numSample)
{
# cat("   Sample:", zsample, "\n")
if(setSeed==1){
set.seed(zsample*10)
}
if(roneJ <= rzeroJ){
# select sample from zeroJtemp randomly (having the same dimension with match class)
zero_sample <- sample(1:rzeroJ, roneJ, replace=FALSE)     # generate random index
zeroJtemp <- zeroJ[zero_sample,eq]
data_mismatch[,1] <- zeroJtemp
} else {
# select sample from oneJtemp randomly (having the same dimension with mismatch class)
one_sample <- sample(1:roneJ, rzeroJ, replace=FALSE)     # generate random index
oneJtemp <- oneJ[one_sample,eq]
data_match[,1] <- oneJtemp
}
rocr <- rbind(data_match, data_mismatch)
colnames(rocr) <- c("simCoefVal", "labels")
pred <- prediction(rocr[,1], rocr[,2])
perf <- performance(pred,"tpr","fpr")
# AUC analysis
auc <- performance(pred,"auc")
auc_label <- unlist (auc@y.name)
auc_values <- round(as.numeric(unlist(auc@y.values)), digits=4)
if(zsample > 1){
eq_auc[eq,(zsample+3)] <- auc_values
} else {
eq_auc[eq,1] <- label[eq]
eq_auc[eq,2] <- id2name(label[eq])
eq_auc[eq,3] <- type
eq_auc[eq,4] <- auc_values
}
}
# end zsample
}
# end ROC analysis
# Mean of AUC
tmp_eqAuc <- as.matrix((eq_auc[,4:ncol(eq_auc)]))
class(tmp_eqAuc) <- "numeric"
meanAUC <- as.matrix(rowMeans(tmp_eqAuc))
eq_auc <- cbind(eq_auc, meanAUC)
iter <- sprintf("iter%02d",1:numSample)
colnames(eq_auc) <- c("Eq.IDs","Equations", "Sim/Dissim",iter,"meanAUC")
# order by meanAUC descending
eq_auc <- eq_auc[order(-meanAUC),]
#View(eq_auc)
# View top-n recommended equations
cat("\nTop-10 recommended equations:\n")
print(eq_auc[1:10,c(1,2,23)])
# save output
fout <- paste("bmeasures_", inFile)
fout <- gsub(" ", "", fout)
write.csv(eq_auc, file = fout, row.names = FALSE)
return (eq_auc)
}
out <- bmeasures_find(inFile = "immune_cancer.csv")
bmeasures_find <- function (inFile, setSeed=0, numSample=20, numRange=100){
# read input file
dataIn <- read.csv(inFile, header = TRUE)
dataIn <- as.matrix(dataIn)
ndataIn <- nrow(dataIn)
cdataIn <- ncol(dataIn)
maxPair <- (ndataIn * (ndataIn - 1))/2
nFeat <- cdataIn-1
# selected equation
redEq <- c("eq_01", "eq_02", "eq_04", "eq_06", "eq_07", "eq_08", "eq_09", "eq_10", "eq_12", "eq_15", "eq_16", "eq_24", "eq_25", "eq_26", "eq_27", "eq_29", "eq_31", "eq_34", "eq_35", "eq_36", "eq_39", "eq_40", "eq_44", "eq_45", "eq_46", "eq_47", "eq_48", "eq_49", "eq_50", "eq_51", "eq_52", "eq_54", "eq_55", "eq_57", "eq_59", "eq_61", "eq_62", "eq_63", "eq_66", "eq_68", "eq_71", "eq_74", "eq_77", "eq_78", "eq_79")
# temporary out matrix
mat <- matrix(0,maxPair,length(redEq)+3)   # cols: Sim/Dissim Eq. 1-45, class1, class2, match/mismatch
tmpID <- matrix(0,maxPair,2)
# calculate similarity/dissimilarity measures using selected equations
# for each equation; for all sample pairs
cat("\nMeasuring the similarity/dissimilarity measures between samples: \n")
for(eq in 1:length(redEq)){
cat("   Eq. IDs:", redEq[eq], "(", eq, "/", length(redEq), ")\n")
id <- 1
for(i in 1:(ndataIn-1)){
for (j in (i+1):ndataIn){
x <- t(as.matrix(dataIn[i,1:nFeat]))
y <- t(as.matrix(dataIn[j,1:nFeat]))
# match/mismatch class
if(eq == 1){
classx <- dataIn[i,cdataIn]
classy <- dataIn[j,cdataIn]
mat[id,length(redEq)+1] <- classx
mat[id,length(redEq)+2] <- classy
if(classx == classy)
mat[id,length(redEq)+3] <- 1
}
tmpResult <- bmeasures(x,y,method = redEq[eq])   # cols out: a b c d coef
# cat("sample:", i,"-", j, "\n")
mat[id,eq] <- tmpResult[1,5]
# tmpID[id,1] <- i
# tmpID[id,2] <- j
id <- id+1
}
}
}
colnames(mat) <- c(redEq, "classx", "classy", "matchxy")
# remove column "classx" and "classy"
mat <- mat[,c(-46,-47)]         # character
# eliminate equations with NA/Infinite values
mat[is.infinite(mat)] <- NA
mat <- mat[,!is.na(colSums(mat))]       #remove col with infinite and NA values
label <- colnames(mat)
z <- length(label)
dissim <- c("eq_15", "eq_16", "eq_17", "eq_18", "eq_19", "eq_20", "eq_21", "eq_22", "eq_23", "eq_24", "eq_25", "eq_26", "eq_27", "eq_28", "eq_29", "eq_30", "eq_62")
# classify into match and mismatch classes
oneJ <- subset(mat, mat[,z] == 1)
zeroJ <- subset(mat, mat[,z] == 0)
# ROC Analysis -----------------------------------------------------------------------------------
cat("\nThe ROC Analysis:\n")
library(ROCR)
roneJ <- nrow(oneJ)
rzeroJ <- nrow(zeroJ)
# num. of samples in the match class are smaller than num. of samples in the mismatch class
if(roneJ <= rzeroJ){
data_match <- matrix(1,roneJ,2)       # Sim coeff values, label (1/0)
data_mismatch <- matrix(0,roneJ,2)
} else {
data_match <- matrix(1,rzeroJ,2)
data_mismatch <- matrix(0,rzeroJ,2)
}
eq_auc <- matrix(0,(z-1),(numSample+3))              # eqIDs, eqName, type (S/D), auc of 20 samples
for (eq in 1:(z-1)){
cat("   Processing:", label[eq], "(", eq, "/", (z-1), ")\n")
maxSim1J <- max(oneJ[,eq])
minSim1J <- min(oneJ[,eq])
maxSim0J <- max(zeroJ[,eq])
minSim0J <- min(zeroJ[,eq])
maxSimJ <- max(maxSim1J, maxSim0J)
minSimJ <- min(minSim1J, minSim0J)
# normalize using (X-min)/(max-min)
oneJ[,eq] <- as.numeric(as.matrix((oneJ[,eq]-minSimJ)/(maxSimJ-minSimJ)))
zeroJ[,eq] <- as.numeric(as.matrix((zeroJ[,eq]-minSimJ)/(maxSimJ-minSimJ)))
# sim/dissim measures
# S = 1 - D^2
mysim <- label[eq] %in% dissim
if (mysim == "TRUE"){
type <- "D"
# S = 1 - D^2
oneJ[,eq] <- 1 - (oneJ[,eq]^2)
zeroJ[,eq] <- 1- (zeroJ[,eq]^2)
} else {
type <- "S"
}
# ROCR package (AUC) ------------------------
# Update Sept 5, 2014 : same size (balanced match and mismatch class) and iteration 20x
if(roneJ <= rzeroJ){
data_match[,1] <- oneJ[,eq]
} else {
data_mismatch[,1] <- zeroJ[,eq]
}
for (zsample in 1:numSample)
{
# cat("   Sample:", zsample, "\n")
if(setSeed==1){
set.seed(zsample*10)
}
if(roneJ <= rzeroJ){
# select sample from zeroJtemp randomly (having the same dimension with match class)
zero_sample <- sample(1:rzeroJ, roneJ, replace=FALSE)     # generate random index
zeroJtemp <- zeroJ[zero_sample,eq]
data_mismatch[,1] <- zeroJtemp
} else {
# select sample from oneJtemp randomly (having the same dimension with mismatch class)
one_sample <- sample(1:roneJ, rzeroJ, replace=FALSE)     # generate random index
oneJtemp <- oneJ[one_sample,eq]
data_match[,1] <- oneJtemp
}
rocr <- rbind(data_match, data_mismatch)
colnames(rocr) <- c("simCoefVal", "labels")
pred <- prediction(rocr[,1], rocr[,2])
perf <- performance(pred,"tpr","fpr")
# AUC analysis
auc <- performance(pred,"auc")
auc_label <- unlist (auc@y.name)
auc_values <- round(as.numeric(unlist(auc@y.values)), digits=4)
if(zsample > 1){
eq_auc[eq,(zsample+3)] <- auc_values
} else {
eq_auc[eq,1] <- label[eq]
eq_auc[eq,2] <- id2name(label[eq])
eq_auc[eq,3] <- type
eq_auc[eq,4] <- auc_values
}
}
# end zsample
}
# end ROC analysis
# Mean of AUC
tmp_eqAuc <- as.matrix((eq_auc[,4:ncol(eq_auc)]))
class(tmp_eqAuc) <- "numeric"
meanAUC <- as.matrix(rowMeans(tmp_eqAuc))
eq_auc <- cbind(eq_auc, meanAUC)
iter <- sprintf("iter%02d",1:numSample)
colnames(eq_auc) <- c("Eq.IDs","Equations", "Sim/Dissim",iter,"meanAUC")
# order by meanAUC descending
eq_auc <- eq_auc[order(-meanAUC),]
#View(eq_auc)
# View top-n recommended equations
cat("\nTop-10 recommended equations:\n")
print(eq_auc[1:10,c(1,2,ncol(eq_auc))])
# save output
fout <- paste("bmeasures_", inFile)
fout <- gsub(" ", "", fout)
write.csv(eq_auc, file = fout, row.names = FALSE)
return (eq_auc)
}
out <- bmeasures_find(inFile = "immune_cancer.csv")
DT1 = data.table(A=1:3,B=letters[1:3])
out <- bmeasures_find(inFile = "immune_cancer.csv")
